// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

package generated

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ensure no MarshalJSON/UnmarshalJSON fuctions are created
type NoOneof struct {
	FieldA               uint32   `protobuf:"varint,1,opt,name=fieldA,proto3" json:"fieldA,omitempty"`
	FieldB               string   `protobuf:"bytes,2,opt,name=fieldB,proto3" json:"fieldB,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoOneof) Reset()         { *m = NoOneof{} }
func (m *NoOneof) String() string { return proto.CompactTextString(m) }
func (*NoOneof) ProtoMessage()    {}
func (*NoOneof) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}
func (m *NoOneof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoOneof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoOneof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoOneof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoOneof.Merge(m, src)
}
func (m *NoOneof) XXX_Size() int {
	return m.Size()
}
func (m *NoOneof) XXX_DiscardUnknown() {
	xxx_messageInfo_NoOneof.DiscardUnknown(m)
}

var xxx_messageInfo_NoOneof proto.InternalMessageInfo

func (m *NoOneof) GetFieldA() uint32 {
	if m != nil {
		return m.FieldA
	}
	return 0
}

func (m *NoOneof) GetFieldB() string {
	if m != nil {
		return m.FieldB
	}
	return ""
}

// verify simple case: message with oneof
type SimpleOneof struct {
	// Types that are valid to be assigned to FieldA:
	//	*SimpleOneof_Name
	//	*SimpleOneof_Number
	FieldA               isSimpleOneof_FieldA `protobuf_oneof:"fieldA"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SimpleOneof) Reset()         { *m = SimpleOneof{} }
func (m *SimpleOneof) String() string { return proto.CompactTextString(m) }
func (*SimpleOneof) ProtoMessage()    {}
func (*SimpleOneof) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{1}
}
func (m *SimpleOneof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleOneof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleOneof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleOneof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleOneof.Merge(m, src)
}
func (m *SimpleOneof) XXX_Size() int {
	return m.Size()
}
func (m *SimpleOneof) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleOneof.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleOneof proto.InternalMessageInfo

type isSimpleOneof_FieldA interface {
	isSimpleOneof_FieldA()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SimpleOneof_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof"`
}
type SimpleOneof_Number struct {
	Number uint32 `protobuf:"varint,2,opt,name=number,proto3,oneof"`
}

func (*SimpleOneof_Name) isSimpleOneof_FieldA()   {}
func (*SimpleOneof_Number) isSimpleOneof_FieldA() {}

func (m *SimpleOneof) GetFieldA() isSimpleOneof_FieldA {
	if m != nil {
		return m.FieldA
	}
	return nil
}

func (m *SimpleOneof) GetName() string {
	if x, ok := m.GetFieldA().(*SimpleOneof_Name); ok {
		return x.Name
	}
	return ""
}

func (m *SimpleOneof) GetNumber() uint32 {
	if x, ok := m.GetFieldA().(*SimpleOneof_Number); ok {
		return x.Number
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SimpleOneof) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SimpleOneof_Name)(nil),
		(*SimpleOneof_Number)(nil),
	}
}

// verify nested case: message with nested message with oneof
type NestedOneof struct {
	FieldA               uint32              `protobuf:"varint,1,opt,name=fieldA,proto3" json:"fieldA,omitempty"`
	FieldB               *NestedOneof_Nested `protobuf:"bytes,2,opt,name=fieldB,proto3" json:"fieldB,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NestedOneof) Reset()         { *m = NestedOneof{} }
func (m *NestedOneof) String() string { return proto.CompactTextString(m) }
func (*NestedOneof) ProtoMessage()    {}
func (*NestedOneof) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{2}
}
func (m *NestedOneof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NestedOneof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NestedOneof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NestedOneof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedOneof.Merge(m, src)
}
func (m *NestedOneof) XXX_Size() int {
	return m.Size()
}
func (m *NestedOneof) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedOneof.DiscardUnknown(m)
}

var xxx_messageInfo_NestedOneof proto.InternalMessageInfo

func (m *NestedOneof) GetFieldA() uint32 {
	if m != nil {
		return m.FieldA
	}
	return 0
}

func (m *NestedOneof) GetFieldB() *NestedOneof_Nested {
	if m != nil {
		return m.FieldB
	}
	return nil
}

type NestedOneof_Nested struct {
	// Types that are valid to be assigned to OneOf:
	//	*NestedOneof_Nested_Name
	//	*NestedOneof_Nested_Number
	OneOf                isNestedOneof_Nested_OneOf `protobuf_oneof:"OneOf"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *NestedOneof_Nested) Reset()         { *m = NestedOneof_Nested{} }
func (m *NestedOneof_Nested) String() string { return proto.CompactTextString(m) }
func (*NestedOneof_Nested) ProtoMessage()    {}
func (*NestedOneof_Nested) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{2, 0}
}
func (m *NestedOneof_Nested) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NestedOneof_Nested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NestedOneof_Nested.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NestedOneof_Nested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedOneof_Nested.Merge(m, src)
}
func (m *NestedOneof_Nested) XXX_Size() int {
	return m.Size()
}
func (m *NestedOneof_Nested) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedOneof_Nested.DiscardUnknown(m)
}

var xxx_messageInfo_NestedOneof_Nested proto.InternalMessageInfo

type isNestedOneof_Nested_OneOf interface {
	isNestedOneof_Nested_OneOf()
	MarshalTo([]byte) (int, error)
	Size() int
}

type NestedOneof_Nested_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof"`
}
type NestedOneof_Nested_Number struct {
	Number uint32 `protobuf:"varint,2,opt,name=number,proto3,oneof"`
}

func (*NestedOneof_Nested_Name) isNestedOneof_Nested_OneOf()   {}
func (*NestedOneof_Nested_Number) isNestedOneof_Nested_OneOf() {}

func (m *NestedOneof_Nested) GetOneOf() isNestedOneof_Nested_OneOf {
	if m != nil {
		return m.OneOf
	}
	return nil
}

func (m *NestedOneof_Nested) GetName() string {
	if x, ok := m.GetOneOf().(*NestedOneof_Nested_Name); ok {
		return x.Name
	}
	return ""
}

func (m *NestedOneof_Nested) GetNumber() uint32 {
	if x, ok := m.GetOneOf().(*NestedOneof_Nested_Number); ok {
		return x.Number
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NestedOneof_Nested) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NestedOneof_Nested_Name)(nil),
		(*NestedOneof_Nested_Number)(nil),
	}
}

// verify no MarshalJSON/UnmarshalJSON functions are created for referenced oneof
type ReferencedOneof struct {
	FieldA               string              `protobuf:"bytes,1,opt,name=fieldA,proto3" json:"fieldA,omitempty"`
	FieldB               *NestedOneof_Nested `protobuf:"bytes,2,opt,name=fieldB,proto3" json:"fieldB,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ReferencedOneof) Reset()         { *m = ReferencedOneof{} }
func (m *ReferencedOneof) String() string { return proto.CompactTextString(m) }
func (*ReferencedOneof) ProtoMessage()    {}
func (*ReferencedOneof) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{3}
}
func (m *ReferencedOneof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReferencedOneof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReferencedOneof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReferencedOneof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReferencedOneof.Merge(m, src)
}
func (m *ReferencedOneof) XXX_Size() int {
	return m.Size()
}
func (m *ReferencedOneof) XXX_DiscardUnknown() {
	xxx_messageInfo_ReferencedOneof.DiscardUnknown(m)
}

var xxx_messageInfo_ReferencedOneof proto.InternalMessageInfo

func (m *ReferencedOneof) GetFieldA() string {
	if m != nil {
		return m.FieldA
	}
	return ""
}

func (m *ReferencedOneof) GetFieldB() *NestedOneof_Nested {
	if m != nil {
		return m.FieldB
	}
	return nil
}

// verify no MarshalJSON/UnmarshalJSON functions are created for imported oneof
type ImportedReference struct {
	FieldA               uint32         `protobuf:"varint,1,opt,name=fieldA,proto3" json:"fieldA,omitempty"`
	FieldB               *ExternalOneof `protobuf:"bytes,2,opt,name=fieldB,proto3" json:"fieldB,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ImportedReference) Reset()         { *m = ImportedReference{} }
func (m *ImportedReference) String() string { return proto.CompactTextString(m) }
func (*ImportedReference) ProtoMessage()    {}
func (*ImportedReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{4}
}
func (m *ImportedReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportedReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportedReference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportedReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportedReference.Merge(m, src)
}
func (m *ImportedReference) XXX_Size() int {
	return m.Size()
}
func (m *ImportedReference) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportedReference.DiscardUnknown(m)
}

var xxx_messageInfo_ImportedReference proto.InternalMessageInfo

func (m *ImportedReference) GetFieldA() uint32 {
	if m != nil {
		return m.FieldA
	}
	return 0
}

func (m *ImportedReference) GetFieldB() *ExternalOneof {
	if m != nil {
		return m.FieldB
	}
	return nil
}

func init() {
	proto.RegisterType((*NoOneof)(nil), "istio.tools.test.NoOneof")
	proto.RegisterType((*SimpleOneof)(nil), "istio.tools.test.SimpleOneof")
	proto.RegisterType((*NestedOneof)(nil), "istio.tools.test.NestedOneof")
	proto.RegisterType((*NestedOneof_Nested)(nil), "istio.tools.test.NestedOneof.Nested")
	proto.RegisterType((*ReferencedOneof)(nil), "istio.tools.test.ReferencedOneof")
	proto.RegisterType((*ImportedReference)(nil), "istio.tools.test.ImportedReference")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor_d938547f84707355) }

var fileDescriptor_d938547f84707355 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xa9, 0x2c, 0x48,
	0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xc8, 0x2c, 0x2e, 0xc9, 0xcc, 0xd7, 0x2b,
	0xc9, 0xcf, 0xcf, 0x29, 0xd6, 0x2b, 0x49, 0x2d, 0x2e, 0x91, 0xe2, 0x4b, 0xad, 0x28, 0x49, 0x2d,
	0xca, 0x4b, 0xcc, 0x81, 0xa8, 0x50, 0xb2, 0xe4, 0x62, 0xf7, 0xcb, 0xf7, 0xcf, 0x4b, 0xcd, 0x4f,
	0x13, 0x12, 0xe3, 0x62, 0x4b, 0xcb, 0x4c, 0xcd, 0x49, 0x71, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0d, 0x82, 0xf2, 0xe0, 0xe2, 0x4e, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x9c, 0x50, 0x71, 0x27, 0x25,
	0x77, 0x2e, 0xee, 0xe0, 0xcc, 0xdc, 0x82, 0x9c, 0x54, 0x88, 0x76, 0x11, 0x2e, 0x96, 0xbc, 0xc4,
	0xdc, 0x54, 0xb0, 0x66, 0x4e, 0x0f, 0x86, 0x20, 0x30, 0x4f, 0x48, 0x82, 0x8b, 0x2d, 0xaf, 0x34,
	0x37, 0x29, 0xb5, 0x08, 0xac, 0x99, 0xd7, 0x83, 0x21, 0x08, 0xca, 0x77, 0xe2, 0x80, 0x59, 0xa7,
	0xb4, 0x8c, 0x91, 0x8b, 0xdb, 0x2f, 0xb5, 0xb8, 0x24, 0x35, 0x05, 0xbf, 0x43, 0x6c, 0x50, 0x1c,
	0xc2, 0x6d, 0xa4, 0xa2, 0x87, 0xee, 0x3d, 0x3d, 0x24, 0x63, 0xa0, 0x6c, 0x98, 0x73, 0xa5, 0x1c,
	0xb9, 0xd8, 0x20, 0x22, 0x24, 0xbb, 0x94, 0x9d, 0x8b, 0xd5, 0x3f, 0x2f, 0xd5, 0x3f, 0x4d, 0x29,
	0x9d, 0x8b, 0x3f, 0x28, 0x35, 0x2d, 0xb5, 0x28, 0x35, 0x2f, 0x19, 0xbb, 0x5b, 0x39, 0xa9, 0xe3,
	0x56, 0xa5, 0x14, 0x2e, 0x41, 0xcf, 0xdc, 0x82, 0xfc, 0x22, 0x90, 0x18, 0xcc, 0x42, 0x9c, 0xc1,
	0x62, 0x8e, 0x66, 0x95, 0x3c, 0xa6, 0x55, 0xae, 0xd0, 0x48, 0x07, 0x5b, 0x06, 0xb3, 0xc5, 0x49,
	0xfc, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x8c, 0xe2, 0x4c,
	0x4f, 0xcd, 0x4b, 0x2d, 0x4a, 0x2c, 0x49, 0x4d, 0x49, 0x62, 0x03, 0xa7, 0x0d, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x76, 0x48, 0x74, 0x9c, 0x4c, 0x02, 0x00, 0x00,
}

func (m *NoOneof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoOneof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoOneof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FieldB) > 0 {
		i -= len(m.FieldB)
		copy(dAtA[i:], m.FieldB)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FieldB)))
		i--
		dAtA[i] = 0x12
	}
	if m.FieldA != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.FieldA))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SimpleOneof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleOneof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleOneof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FieldA != nil {
		{
			size := m.FieldA.Size()
			i -= size
			if _, err := m.FieldA.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleOneof_Name) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *SimpleOneof_Name) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *SimpleOneof_Number) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *SimpleOneof_Number) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.Number))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *NestedOneof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NestedOneof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NestedOneof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FieldB != nil {
		{
			size, err := m.FieldB.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FieldA != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.FieldA))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NestedOneof_Nested) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NestedOneof_Nested) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NestedOneof_Nested) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OneOf != nil {
		{
			size := m.OneOf.Size()
			i -= size
			if _, err := m.OneOf.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *NestedOneof_Nested_Name) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *NestedOneof_Nested_Name) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *NestedOneof_Nested_Number) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *NestedOneof_Nested_Number) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.Number))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ReferencedOneof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReferencedOneof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReferencedOneof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FieldB != nil {
		{
			size, err := m.FieldB.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FieldA) > 0 {
		i -= len(m.FieldA)
		copy(dAtA[i:], m.FieldA)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FieldA)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImportedReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportedReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportedReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FieldB != nil {
		{
			size, err := m.FieldB.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FieldA != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.FieldA))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NoOneof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldA != 0 {
		n += 1 + sovTypes(uint64(m.FieldA))
	}
	l = len(m.FieldB)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimpleOneof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldA != nil {
		n += m.FieldA.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimpleOneof_Name) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *SimpleOneof_Number) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.Number))
	return n
}
func (m *NestedOneof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldA != 0 {
		n += 1 + sovTypes(uint64(m.FieldA))
	}
	if m.FieldB != nil {
		l = m.FieldB.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NestedOneof_Nested) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneOf != nil {
		n += m.OneOf.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NestedOneof_Nested_Name) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *NestedOneof_Nested_Number) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.Number))
	return n
}
func (m *ReferencedOneof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FieldA)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.FieldB != nil {
		l = m.FieldB.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImportedReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldA != 0 {
		n += 1 + sovTypes(uint64(m.FieldA))
	}
	if m.FieldB != nil {
		l = m.FieldB.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NoOneof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoOneof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoOneof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldA", wireType)
			}
			m.FieldA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldA |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleOneof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleOneof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleOneof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldA = &SimpleOneof_Name{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FieldA = &SimpleOneof_Number{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NestedOneof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NestedOneof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NestedOneof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldA", wireType)
			}
			m.FieldA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldA |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldB == nil {
				m.FieldB = &NestedOneof_Nested{}
			}
			if err := m.FieldB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NestedOneof_Nested) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nested: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nested: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OneOf = &NestedOneof_Nested_Name{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneOf = &NestedOneof_Nested_Number{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReferencedOneof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReferencedOneof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReferencedOneof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldB == nil {
				m.FieldB = &NestedOneof_Nested{}
			}
			if err := m.FieldB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportedReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportedReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportedReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldA", wireType)
			}
			m.FieldA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldA |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldB == nil {
				m.FieldB = &ExternalOneof{}
			}
			if err := m.FieldB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTypes
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)
