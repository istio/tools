// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰CompressedFileInfo{
			name:             "/",
			modTime:          time.Date(2019, 8, 7, 21, 25, 51, 79909274, time.UTC),
			uncompressedSize: 3064,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x51\x6f\xe3\xb8\x11\x7e\xb6\x7e\xc5\x54\x77\x0f\x6d\xe1\xca\xbb\xfb\xd6\xb4\xd7\xc0\xcd\x6e\x5a\xa3\x87\xb8\x88\xb3\x3d\x1c\xda\x2b\x30\xa6\x46\xd2\xdc\x52\x24\x97\xa4\xec\x18\xbd\xed\x6f\x2f\x86\x94\x64\x25\xed\x63\xcf\x40\x80\x98\x9c\xf9\x38\xfc\xbe\x6f\x86\xde\x6c\xe0\xce\xba\x8b\xe7\xb6\x8b\xf0\xee\xcd\xdb\xdf\xc2\x2e\x44\xb6\xb0\x1d\x62\x67\x7d\x28\x36\x9b\x62\xb3\x81\x6f\x59\x91\x09\x54\xc3\x60\x6a\xf2\x10\x3b\x82\xad\x43\xd5\xd1\xb4\xb3\x86\xbf\x91\x0f\x6c\x0d\xbc\xab\xde\xc0\x2f\x25\xa0\x1c\xb7\xca\x5f\xfd\x4e\x20\x2e\x76\x80\x1e\x2f\x60\x6c\x84\x21\x10\xc4\x8e\x03\x34\xac\x09\xe8\x59\x91\x8b\xc0\x06\x94\xed\x9d\x66\x34\x8a\xe0\xcc\xb1\x4b\xe7\x8c\x28\x95\x60\x7c\x3f\x62\xd8\x63\x44\x36\x80\xa0\xac\xbb\x80\x6d\x96\x81\x80\x71\x2c\x5a\x3e\x5d\x8c\xee\x66\xb3\x39\x9f\xcf\x15\xa6\x82\x2b\xeb\xdb\x8d\xce\xa1\x61\xf3\xed\xee\xee\xc3\xc3\xe1\xc3\x6f\xde\x55\x6f\xc6\xa4\x8f\x46\x53\x08\xe0\xe9\xf3\xc0\x9e\x6a\x38\x5e\x00\x9d\xd3\xac\xf0\xa8\x09\x34\x9e\xc1\x7a\xc0\xd6\x13\xd5\x10\xad\x14\x7d\xf6\x1c\xd9\xb4\x6b\x08\xb6\x89\x67\xf4\x24\x30\x35\x87\xe8\xf9\x38\xc4\x17\x9c\x4d\x25\x72\x78\x11\x60\x0d\xa0\x81\x72\x7b\x80\xdd\xa1\x84\x3f\x6e\x0f\xbb\xc3\x5a\x40\xbe\xdb\x3d\xfd\x79\xff\xf1\x09\xbe\xdb\x3e\x3e\x6e\x1f\x9e\x76\x1f\x0e\xb0\x7f\x84\xbb\xfd\xc3\xfb\xdd\xd3\x6e\xff\x70\x80\xfd\x3d\x6c\x1f\xbe\x87\xbf\xec\x1e\xde\xaf\x81\x38\x76\xe4\x81\x9e\x9d\x97\x1b\x58\x0f\x2c\x6c\x52\x9d\xa8\x3b\x10\xbd\x28\xa1\xb1\xb9\xa4\xe0\x48\x71\xc3\x0a\x34\x9a\x76\xc0\x96\xa0\xb5\x27\xf2\x86\x4d\x0b\x8e\x7c\xcf\x41\x54\x0d\x80\xa6\x16\x18\xcd\x3d\x47\x8c\x69\xe9\xbf\xee\x55\x15\x12\xf2\x34\x0b\x5b\x53\x50\x9e\x8f\x14\x52\x10\x9e\x90\x75\x62\xb1\x61\xd2\x75\x98\x4b\x68\xc9\x58\x87\x0c\xca\x9a\x86\xdb\xc1\x27\xf8\x84\x90\x2a\xdf\x3b\xf9\x8e\x7a\x4a\x43\x4f\xc0\xa6\x66\x85\xc2\x5d\xf2\x09\xc2\xe7\x81\x42\x4a\xeb\xd1\x7f\xca\x75\xf4\xb6\x1e\x34\x81\xb2\xde\x53\x70\xd6\xd4\x41\x04\x93\x03\xff\x64\x85\x9d\xbb\x8f\x1f\xa6\x18\xdb\x00\x82\x27\x67\x03\x47\xeb\x2f\x6b\x38\x77\xac\x3a\x91\x29\x76\xa3\x9c\x9e\x94\x6c\x81\xf3\xd4\xf0\xb3\x38\x38\x79\xc3\xa1\xfa\x84\x2d\x85\x54\x07\x9b\x04\x3f\x82\x8a\x3b\x7a\x67\x7d\x04\x42\xd5\x81\x15\x75\xd2\x85\xee\xad\xa8\x84\xbd\xd3\xb4\x4e\x24\xb4\x1c\xbb\xe1\x58\x29\xdb\x6f\x58\x6e\xb1\x41\xc7\xeb\x25\x14\x07\x28\xd3\x4e\x95\x37\xcb\xaa\xc8\x3b\x37\x20\x2e\x32\x6d\x51\x58\x47\x06\x1d\xdf\xde\xc0\xbf\x8a\xd5\x66\x03\x81\x74\x73\x67\x8d\xf4\x09\xd5\x93\xca\x52\x67\x47\xc9\x26\xa8\x35\x78\x6a\xc8\x93\x51\x14\x20\x74\x76\xd0\x35\x1c\x85\x5a\xa5\x87\x7a\x64\x96\x4d\x02\x93\x52\xf6\x8e\xcc\xf6\xaf\x3b\xb0\x43\x74\x43\x5c\x83\x27\x35\xf8\xc0\x27\xd2\x97\xaa\x58\xbd\x38\xee\x06\x8e\xd6\x6a\xf8\x09\x7e\xdd\xa0\x0e\x54\x24\x8c\xa4\xde\x3d\xeb\x48\x1e\x6a\x6a\xd8\x50\x48\xa4\xb7\x83\xc6\xd9\xb5\xa2\xa0\x88\xa1\x67\xb5\xa3\x05\xdb\x73\x84\xc6\xdb\x3e\xa9\x21\x58\xb9\x86\x0a\x76\x51\xa8\xb1\x46\x5f\x24\xc5\x9e\x73\x4f\x36\xf9\x90\x09\xa0\xc3\x08\x58\xd7\xf2\xc7\xd9\x49\x09\x43\x59\x13\xa2\x47\x36\x31\x54\x70\xbf\x88\x9d\xbc\x05\x47\x0c\xac\x20\x5e\x1c\x05\x50\x68\x64\x70\x1d\x09\x3c\xf5\xf6\x44\xf5\x78\x78\x82\x42\x03\xe4\xbd\xf5\x49\xcc\x30\xa8\x6e\x51\xfc\x31\xcd\xb7\xcc\xe8\xf1\x32\x4f\xbd\x28\x5e\x90\xdc\xfb\xab\xa9\x3f\x0f\xa8\x45\xa4\x31\x90\xd8\xc3\xfe\xf8\x23\xa9\x98\x6a\xa8\x92\x6f\xd8\x84\x28\xf3\x71\x3d\x73\xd1\xb3\xe1\x7e\xe8\xf3\x91\xd3\x2c\x0c\xaa\xa3\x1e\xc1\xe6\x74\x0e\x0b\x6c\x0c\x70\x48\xbb\x9b\x31\xb3\x2a\x56\x0b\x6d\x6e\xaf\x96\x12\x74\x7a\x76\x68\xea\xc7\xab\x51\x3c\x39\x8d\xf9\x9f\x79\x2d\xf7\xa0\x8a\x03\xea\xf1\xc8\xe4\x33\x23\x9d\x4d\xd2\xce\xa6\x4d\x60\x93\x85\xf2\xf9\x93\x7c\x2f\xd8\x43\x93\xfa\xf2\x84\x7a\x48\x1d\x94\x4e\x49\xad\x14\xc5\x62\xc0\xcd\x68\x48\xd1\x3d\x0d\x06\x81\x90\x6e\xac\x8a\xd5\xeb\x62\x5f\xfb\xf0\xcb\x38\x9f\x28\x19\x2c\x90\x4a\xf9\xd7\xde\x08\x14\xa5\xd6\x3c\x99\xae\xb5\x4b\x51\xd8\xb6\x9e\x5a\x71\xc5\x74\x09\x99\x4f\x45\x2a\x05\xa3\x98\x49\xac\x1f\x32\x70\x26\x3f\x9b\xbc\x4e\x4b\xa3\x2c\xd7\x31\x42\x26\x7a\xa6\x50\x15\xa8\xf5\xdc\xb3\x16\x1d\xdf\xb3\x26\x83\x3d\x8d\xc3\x27\x1d\x93\xbe\x2f\xa6\xa5\xd4\x45\xf5\xab\x8e\xac\x8a\xd5\x32\xff\x06\xbe\xf9\x77\x59\xfd\x18\xac\xf9\xba\xcc\x52\x46\x8e\x32\xea\x4e\xe4\x3d\xd7\xe3\x4c\xfe\x3a\x8f\xe8\x4c\x24\x86\x60\x15\x2f\xa7\xea\x5c\x6f\x55\xac\x52\xfa\xc2\x1c\xa7\xfc\xde\xcb\x39\x5f\x95\xff\x3c\xfd\xa3\xae\xca\xaf\x84\xea\xf2\xf4\x16\x9d\xee\xf0\x6d\x39\xf2\x3d\x81\x08\xc3\x22\x37\xf4\xe8\x84\x90\xc5\xba\x4c\x13\x8d\x91\x4f\x34\x8d\x68\x6f\x6d\xcc\xc3\x31\x8f\xe2\x68\x05\xca\x79\xab\xe4\x6d\x73\xde\xe6\x3e\x17\x06\x97\xf8\xbf\x7f\xcf\xfe\x0f\x37\xf0\xf7\xaa\xaa\x32\xa5\xbd\xad\xaf\xaf\x45\x18\xc1\x16\xe9\xf9\x0d\x4f\xfd\x29\x6f\xf9\x95\xdc\x99\xd4\xf4\x43\x42\x34\x4c\x9f\x29\x56\x16\x16\x30\x63\x98\x23\x2f\xfc\xc3\x8c\x03\x08\x81\x1c\xfa\xd7\xc6\x49\x37\x4b\xcf\xc2\x15\xa4\x58\x49\xb1\xb7\x37\x50\xa2\xd6\x25\xfc\x04\xe5\x08\x37\xea\x97\x22\xef\x53\xd1\x3d\x9a\x01\xb5\xbe\xcc\xde\xad\x13\x69\x9a\x43\x14\x66\xff\xf7\xfd\xaa\x62\x75\x85\xb8\xcd\x24\x65\x35\x7f\x28\xfe\x0f\xf6\x4b\xcf\x38\x3a\x4e\x50\x67\x16\x7e\x58\x7d\x82\xd4\x07\x38\xe8\x08\x19\xb6\x81\xc1\xcc\x55\xbf\xf2\xec\xed\xcf\x63\xda\xdb\x1b\xf8\xc5\x37\xe5\x08\x38\xda\x76\xd1\xf5\x02\x39\xad\xca\xdb\x63\x5e\x28\x55\xa5\x79\x31\xdd\x61\x11\x9b\x27\x7f\x58\x48\x30\x3e\xff\x8b\xdf\x0a\x18\xbb\x6a\xee\x94\xdb\x17\xad\x52\x7c\xf9\xa1\x28\x94\xaf\xe7\xe6\x97\xd4\x4c\xe5\x02\x61\x9c\x1b\x77\x8f\xef\xc7\xdf\x43\xab\x9a\x5f\x8f\xe8\x45\xe2\xac\xd6\x35\x2f\xa4\xf1\x3e\xf3\x3b\x26\x7e\x29\xfe\x13\x00\x00\xff\xff\x4d\x91\x25\xed\xf8\x0b\x00\x00"),
		},
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
