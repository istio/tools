<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="646.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="629" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="629" > </text>
<g id="frames">
<g >
<title>Envoy::MessageUtil::hash (1 samples, 25.00%)</title><rect x="10.0" y="149" width="295.0" height="15.0" fill="rgb(224,204,48)" rx="2" ry="2" />
<text  x="13.00" y="159.5" >Envoy::MessageUtil::hash</text>
</g>
<g >
<title>event_base_loop (2 samples, 50.00%)</title><rect x="600.0" y="517" width="590.0" height="15.0" fill="rgb(239,114,44)" rx="2" ry="2" />
<text  x="603.00" y="527.5" >event_base_loop</text>
</g>
<g >
<title>http_parser_execute (1 samples, 25.00%)</title><rect x="305.0" y="341" width="295.0" height="15.0" fill="rgb(247,36,44)" rx="2" ry="2" />
<text  x="308.00" y="351.5" >http_parser_execute</text>
</g>
<g >
<title>event_process_active_single_queue (2 samples, 50.00%)</title><rect x="10.0" y="469" width="590.0" height="15.0" fill="rgb(228,107,12)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >event_process_active_single_queue</text>
</g>
<g >
<title>Envoy::Server::ListenerManagerImpl::addOrUpdateListener (1 samples, 25.00%)</title><rect x="10.0" y="165" width="295.0" height="15.0" fill="rgb(233,212,33)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >Envoy::Server::ListenerManagerImpl::add..</text>
</g>
<g >
<title>Envoy::Http::Http1::ConnectionImpl::dispatch (1 samples, 25.00%)</title><rect x="305.0" y="373" width="295.0" height="15.0" fill="rgb(211,196,20)" rx="2" ry="2" />
<text  x="308.00" y="383.5" >Envoy::Http::Http1::ConnectionImpl::dis..</text>
</g>
<g >
<title>main (2 samples, 50.00%)</title><rect x="10.0" y="533" width="590.0" height="15.0" fill="rgb(243,178,15)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >main</text>
</g>
<g >
<title>Envoy::Http::CodecClient::onData (1 samples, 25.00%)</title><rect x="10.0" y="373" width="295.0" height="15.0" fill="rgb(236,182,39)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >Envoy::Http::CodecClient::onData</text>
</g>
<g >
<title>Envoy::Server::AdminImpl::runCallback (1 samples, 25.00%)</title><rect x="305.0" y="213" width="295.0" height="15.0" fill="rgb(242,17,16)" rx="2" ry="2" />
<text  x="308.00" y="223.5" >Envoy::Server::AdminImpl::runCallback</text>
</g>
<g >
<title>Envoy::Router::Filter::UpstreamRequest::decodeData (1 samples, 25.00%)</title><rect x="10.0" y="293" width="295.0" height="15.0" fill="rgb(214,73,50)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >Envoy::Router::Filter::UpstreamRequest:..</text>
</g>
<g >
<title>Envoy::Server::PrometheusStatsFormatter::statsAsPrometheus (1 samples, 25.00%)</title><rect x="305.0" y="165" width="295.0" height="15.0" fill="rgb(247,166,28)" rx="2" ry="2" />
<text  x="308.00" y="175.5" >Envoy::Server::PrometheusStatsFormatter..</text>
</g>
<g >
<title>google::protobuf::TextFormat::Printer::PrintField (1 samples, 25.00%)</title><rect x="10.0" y="53" width="295.0" height="15.0" fill="rgb(217,48,17)" rx="2" ry="2" />
<text  x="13.00" y="63.5" >google::protobuf::TextFormat::Printer::..</text>
</g>
<g >
<title>Envoy::Http::ConnectionManagerImpl::ActiveStream::decodeHeaders (1 samples, 25.00%)</title><rect x="305.0" y="277" width="295.0" height="15.0" fill="rgb(243,131,19)" rx="2" ry="2" />
<text  x="308.00" y="287.5" >Envoy::Http::ConnectionManagerImpl::Act..</text>
</g>
<g >
<title>event_base_loop (2 samples, 50.00%)</title><rect x="10.0" y="485" width="590.0" height="15.0" fill="rgb(239,114,44)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >event_base_loop</text>
</g>
<g >
<title>Envoy::Config::GrpcMuxSubscriptionImpl::onConfigUpdate (1 samples, 25.00%)</title><rect x="10.0" y="213" width="295.0" height="15.0" fill="rgb(218,68,51)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >Envoy::Config::GrpcMuxSubscriptionImpl:..</text>
</g>
<g >
<title>google::protobuf::TextFormat::Printer::TextGenerator::Write (1 samples, 25.00%)</title><rect x="10.0" y="37" width="295.0" height="15.0" fill="rgb(206,91,13)" rx="2" ry="2" />
<text  x="13.00" y="47.5" >google::protobuf::TextFormat::Printer::..</text>
</g>
<g >
<title>Envoy::Http::CodecClient::CodecReadFilter::onData (1 samples, 25.00%)</title><rect x="10.0" y="389" width="295.0" height="15.0" fill="rgb(240,23,40)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >Envoy::Http::CodecClient::CodecReadFilt..</text>
</g>
<g >
<title>google::protobuf::TextFormat::Printer::PrintField (1 samples, 25.00%)</title><rect x="10.0" y="85" width="295.0" height="15.0" fill="rgb(217,48,17)" rx="2" ry="2" />
<text  x="13.00" y="95.5" >google::protobuf::TextFormat::Printer::..</text>
</g>
<g >
<title>Envoy::Network::ConnectionImpl::onFileEvent (2 samples, 50.00%)</title><rect x="10.0" y="437" width="590.0" height="15.0" fill="rgb(232,17,29)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >Envoy::Network::ConnectionImpl::onFileEvent</text>
</g>
<g >
<title>Envoy::Server::InstanceImpl::run (2 samples, 50.00%)</title><rect x="10.0" y="501" width="590.0" height="15.0" fill="rgb(220,23,33)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >Envoy::Server::InstanceImpl::run</text>
</g>
<g >
<title>google::protobuf::TextFormat::Printer::PrintToString (1 samples, 25.00%)</title><rect x="10.0" y="133" width="295.0" height="15.0" fill="rgb(231,224,45)" rx="2" ry="2" />
<text  x="13.00" y="143.5" >google::protobuf::TextFormat::Printer::..</text>
</g>
<g >
<title>nghttp2_session_mem_recv (1 samples, 25.00%)</title><rect x="10.0" y="341" width="295.0" height="15.0" fill="rgb(234,166,12)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >nghttp2_session_mem_recv</text>
</g>
<g >
<title>Envoy::Http::Http2::ConnectionImpl::dispatch (1 samples, 25.00%)</title><rect x="10.0" y="357" width="295.0" height="15.0" fill="rgb(228,155,54)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >Envoy::Http::Http2::ConnectionImpl::dis..</text>
</g>
<g >
<title>Envoy::Http::Http1::ConnectionImpl::dispatchSlice (1 samples, 25.00%)</title><rect x="305.0" y="357" width="295.0" height="15.0" fill="rgb(249,124,30)" rx="2" ry="2" />
<text  x="308.00" y="367.5" >Envoy::Http::Http1::ConnectionImpl::dis..</text>
</g>
<g >
<title>start_thread (2 samples, 50.00%)</title><rect x="600.0" y="565" width="590.0" height="15.0" fill="rgb(254,116,12)" rx="2" ry="2" />
<text  x="603.00" y="575.5" >start_thread</text>
</g>
<g >
<title>Envoy::Http::AsyncStreamImpl::encodeData (1 samples, 25.00%)</title><rect x="10.0" y="277" width="295.0" height="15.0" fill="rgb(206,158,30)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >Envoy::Http::AsyncStreamImpl::encodeData</text>
</g>
<g >
<title>Envoy::Server::AdminImpl::handlerPrometheusStats (1 samples, 25.00%)</title><rect x="305.0" y="181" width="295.0" height="15.0" fill="rgb(215,84,33)" rx="2" ry="2" />
<text  x="308.00" y="191.5" >Envoy::Server::AdminImpl::handlerPromet..</text>
</g>
<g >
<title>Envoy::Http::Http1::ServerConnectionImpl::onMessageComplete (1 samples, 25.00%)</title><rect x="305.0" y="293" width="295.0" height="15.0" fill="rgb(240,5,18)" rx="2" ry="2" />
<text  x="308.00" y="303.5" >Envoy::Http::Http1::ServerConnectionImp..</text>
</g>
<g >
<title>event_add (1 samples, 25.00%)</title><rect x="600.0" y="469" width="295.0" height="15.0" fill="rgb(205,152,29)" rx="2" ry="2" />
<text  x="603.00" y="479.5" >event_add</text>
</g>
<g >
<title>Envoy::Event::TimerImpl::enableTimer (1 samples, 25.00%)</title><rect x="600.0" y="485" width="295.0" height="15.0" fill="rgb(208,34,52)" rx="2" ry="2" />
<text  x="603.00" y="495.5" >Envoy::Event::TimerImpl::enableTimer</text>
</g>
<g >
<title>__libc_start_main (2 samples, 50.00%)</title><rect x="10.0" y="549" width="590.0" height="15.0" fill="rgb(225,128,52)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >__libc_start_main</text>
</g>
<g >
<title>std::__1::__function::__func&lt;Envoy::Server::AdminImpl::AdminImpl (1 samples, 25.00%)</title><rect x="305.0" y="197" width="295.0" height="15.0" fill="rgb(207,78,40)" rx="2" ry="2" />
<text  x="308.00" y="207.5" >std::__1::__function::__func&lt;Envoy::Ser..</text>
</g>
<g >
<title>Envoy::Server::LdsApiImpl::onConfigUpdate (1 samples, 25.00%)</title><rect x="10.0" y="181" width="295.0" height="15.0" fill="rgb(225,54,27)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >Envoy::Server::LdsApiImpl::onConfigUpdate</text>
</g>
<g >
<title>Envoy::Network::ConnectionImpl::onReadReady (2 samples, 50.00%)</title><rect x="10.0" y="421" width="590.0" height="15.0" fill="rgb(230,184,12)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >Envoy::Network::ConnectionImpl::onReadReady</text>
</g>
<g >
<title>Envoy::Server::LdsApiImpl::onConfigUpdate (1 samples, 25.00%)</title><rect x="10.0" y="197" width="295.0" height="15.0" fill="rgb(225,54,27)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >Envoy::Server::LdsApiImpl::onConfigUpdate</text>
</g>
<g >
<title>Envoy::Config::GrpcMuxImpl::onDiscoveryResponse (1 samples, 25.00%)</title><rect x="10.0" y="229" width="295.0" height="15.0" fill="rgb(218,126,25)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >Envoy::Config::GrpcMuxImpl::onDiscovery..</text>
</g>
<g >
<title>Envoy::Server::AdminFilter::onComplete (1 samples, 25.00%)</title><rect x="305.0" y="229" width="295.0" height="15.0" fill="rgb(207,162,35)" rx="2" ry="2" />
<text  x="308.00" y="239.5" >Envoy::Server::AdminFilter::onComplete</text>
</g>
<g >
<title>pthread_mutex_lock (1 samples, 25.00%)</title><rect x="895.0" y="501" width="295.0" height="15.0" fill="rgb(232,158,36)" rx="2" ry="2" />
<text  x="898.00" y="511.5" >pthread_mutex_lock</text>
</g>
<g >
<title>Envoy::Server::WorkerImpl::threadRoutine (2 samples, 50.00%)</title><rect x="600.0" y="533" width="590.0" height="15.0" fill="rgb(251,132,43)" rx="2" ry="2" />
<text  x="603.00" y="543.5" >Envoy::Server::WorkerImpl::threadRoutine</text>
</g>
<g >
<title>google::protobuf::TextFormat::Printer::Print (1 samples, 25.00%)</title><rect x="10.0" y="69" width="295.0" height="15.0" fill="rgb(248,169,33)" rx="2" ry="2" />
<text  x="13.00" y="79.5" >google::protobuf::TextFormat::Printer::..</text>
</g>
<g >
<title>nghttp2_session_on_data_received (1 samples, 25.00%)</title><rect x="10.0" y="325" width="295.0" height="15.0" fill="rgb(206,39,26)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >nghttp2_session_on_data_received</text>
</g>
<g >
<title>Envoy::Http::Http2::ConnectionImpl::onFrameReceived (1 samples, 25.00%)</title><rect x="10.0" y="309" width="295.0" height="15.0" fill="rgb(226,208,44)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >Envoy::Http::Http2::ConnectionImpl::onF..</text>
</g>
<g >
<title>Envoy::Server::AdminFilter::decodeHeaders (1 samples, 25.00%)</title><rect x="305.0" y="245" width="295.0" height="15.0" fill="rgb(243,137,20)" rx="2" ry="2" />
<text  x="308.00" y="255.5" >Envoy::Server::AdminFilter::decodeHeaders</text>
</g>
<g >
<title>Envoy::MainCommonBase::run (2 samples, 50.00%)</title><rect x="10.0" y="517" width="590.0" height="15.0" fill="rgb(236,210,20)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >Envoy::MainCommonBase::run</text>
</g>
<g >
<title>Envoy::Http::Http1::ConnectionImpl::onMessageCompleteBase (1 samples, 25.00%)</title><rect x="305.0" y="309" width="295.0" height="15.0" fill="rgb(230,130,52)" rx="2" ry="2" />
<text  x="308.00" y="319.5" >Envoy::Http::Http1::ConnectionImpl::onM..</text>
</g>
<g >
<title>google::protobuf::TextFormat::Printer::Print (1 samples, 25.00%)</title><rect x="10.0" y="117" width="295.0" height="15.0" fill="rgb(248,169,33)" rx="2" ry="2" />
<text  x="13.00" y="127.5" >google::protobuf::TextFormat::Printer::..</text>
</g>
<g >
<title>[unknown] (2 samples, 50.00%)</title><rect x="10.0" y="565" width="590.0" height="15.0" fill="rgb(213,138,45)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >[unknown]</text>
</g>
<g >
<title>envoy (4 samples, 100.00%)</title><rect x="10.0" y="581" width="1180.0" height="15.0" fill="rgb(219,96,18)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >envoy</text>
</g>
<g >
<title>Envoy::Grpc::AsyncStreamImpl::onData (1 samples, 25.00%)</title><rect x="10.0" y="261" width="295.0" height="15.0" fill="rgb(237,214,5)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >Envoy::Grpc::AsyncStreamImpl::onData</text>
</g>
<g >
<title>strlen (1 samples, 25.00%)</title><rect x="305.0" y="149" width="295.0" height="15.0" fill="rgb(210,158,37)" rx="2" ry="2" />
<text  x="308.00" y="159.5" >strlen</text>
</g>
<g >
<title>Envoy::Http::ConnectionManagerImpl::onData (1 samples, 25.00%)</title><rect x="305.0" y="389" width="295.0" height="15.0" fill="rgb(214,128,23)" rx="2" ry="2" />
<text  x="308.00" y="399.5" >Envoy::Http::ConnectionManagerImpl::onD..</text>
</g>
<g >
<title>Envoy::Http::ConnectionManagerImpl::ActiveStream::decodeHeaders (1 samples, 25.00%)</title><rect x="305.0" y="261" width="295.0" height="15.0" fill="rgb(243,131,19)" rx="2" ry="2" />
<text  x="308.00" y="271.5" >Envoy::Http::ConnectionManagerImpl::Act..</text>
</g>
<g >
<title>google::protobuf::TextFormat::Printer::Print (1 samples, 25.00%)</title><rect x="10.0" y="101" width="295.0" height="15.0" fill="rgb(248,169,33)" rx="2" ry="2" />
<text  x="13.00" y="111.5" >google::protobuf::TextFormat::Printer::..</text>
</g>
<g >
<title>Envoy::Event::FileEventImpl::assignEvents (2 samples, 50.00%)</title><rect x="10.0" y="453" width="590.0" height="15.0" fill="rgb(231,107,8)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >Envoy::Event::FileEventImpl::assignEvents</text>
</g>
<g >
<title>Envoy::Thread::ThreadImplPosix::ThreadImplPosix (2 samples, 50.00%)</title><rect x="600.0" y="549" width="590.0" height="15.0" fill="rgb(211,166,54)" rx="2" ry="2" />
<text  x="603.00" y="559.5" >Envoy::Thread::ThreadImplPosix::ThreadImplPosix</text>
</g>
<g >
<title>event_process_active_single_queue (1 samples, 25.00%)</title><rect x="600.0" y="501" width="295.0" height="15.0" fill="rgb(228,107,12)" rx="2" ry="2" />
<text  x="603.00" y="511.5" >event_process_active_single_queue</text>
</g>
<g >
<title>all (4 samples, 100%)</title><rect x="10.0" y="597" width="1180.0" height="15.0" fill="rgb(254,61,14)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>Envoy::Http::Http1::ConnectionImpl::$_7::__invoke (1 samples, 25.00%)</title><rect x="305.0" y="325" width="295.0" height="15.0" fill="rgb(210,21,10)" rx="2" ry="2" />
<text  x="308.00" y="335.5" >Envoy::Http::Http1::ConnectionImpl::$_7..</text>
</g>
<g >
<title>Envoy::Grpc::AsyncStreamCallbacks&lt;envoy::api::v2::DiscoveryResponse&gt;::onReceiveMessageRaw (1 samples, 25.00%)</title><rect x="10.0" y="245" width="295.0" height="15.0" fill="rgb(251,227,15)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >Envoy::Grpc::AsyncStreamCallbacks&lt;envoy..</text>
</g>
<g >
<title>event_add_nolock_ (1 samples, 25.00%)</title><rect x="600.0" y="453" width="295.0" height="15.0" fill="rgb(253,189,3)" rx="2" ry="2" />
<text  x="603.00" y="463.5" >event_add_nolock_</text>
</g>
<g >
<title>Envoy::Network::FilterManagerImpl::onContinueReading (2 samples, 50.00%)</title><rect x="10.0" y="405" width="590.0" height="15.0" fill="rgb(215,184,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >Envoy::Network::FilterManagerImpl::onContinueReading</text>
</g>
</g>
</svg>
