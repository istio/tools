{{- define "rbac" }}
{{- $ruleName := (randAlpha 16) | lower }}
apiVersion: "rbac.istio.io/v1alpha1"
kind: ServiceRole
metadata:
  name: {{ $ruleName }}
spec:
  rules:
  - services: ["{{ $.name }}.*"]
    methods: ["*"]
---
apiVersion: "rbac.istio.io/v1alpha1"
kind: ServiceRoleBinding
metadata:
  name: {{ $ruleName }}
spec:
  subjects:
  - user: "{{ $.userName }}"
  roleRef:
    kind: ServiceRole
    name: "{{ $ruleName }}"
{{- end }}

{{- define "fortio" }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $.name }}
spec:
  ports:
  - name: http-echo
    port: 8080
    protocol: TCP
  - name: grpc-ping
    port: 8079
    protocol: TCP
  - name: http-echoa
    port: 8077
    protocol: TCP
  - name: grpc-pinga
    port: 8076
    protocol: TCP
  - name: nighthawk-service
    port: 9999
    protocol: TCP
  - name: fortio-reporting
    port: 9076
    protocol: TCP
  selector:
    app: {{ $.name }}
{{- if $.V.expose }}
  type: LoadBalancer
{{- end }}
---
{{- if $.V.inject }}
{{- if $.Values.rbac.enabled }}
{{- range $i, $e := until ($.Values.rbac.numPolicies|int) }}
{{- $data := dict "name" $.name "Values" $.Values "userName" (randAlpha 16) }}
{{- template "rbac" $data }}
---
{{- end }}
{{- $data := dict "name" .name "Values" .Values "ruleName" (randAlphaNum 16) "userName" "*" }}
  {{- template "rbac" $data }}
---
apiVersion: "rbac.istio.io/v1alpha1"
kind: RbacConfig
metadata:
  name: default
spec:
  mode: 'ON'
---
{{- end }}
{{- end }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: nighthawk-test-server-config
data: # TODO(oschaaf): can we fold captured/uncaptured pods, and just have captured/uncaptured ports?
  nighthawk-test-server-captured.yaml: |
    admin:
      access_log_path: /var/lib/fortio/nighthawk_test_server_admin_access_captured.log
      profile_path: /var/lib/fortio/nighthawk_test_server_captured.prof
      address:
        socket_address: { address: 0.0.0.0, port_value: 9080 }
    static_resources:
      listeners:
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 8080
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              generate_request_id: false
              codec_type: auto
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                - name: service
                  domains:
                  - "*"
              http_filters:
              - name: envoy.fault
                config:
                  max_active_faults: 100
                  delay:
                    header_delay: {}
                    percentage:
                      numerator: 100
              - name: test-server
                config:
                  response_body_size: 1024
                  response_headers:
                  - { header: { key: "x-nighthawk", value: "captured"}}
              - name: envoy.router
                config:
                  dynamic_stats: false
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 8079
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              generate_request_id: false
              codec_type: auto
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                - name: service
                  domains:
                  - "*"
              http_filters:
              - name: envoy.fault
                config:
                  max_active_faults: 100
                  delay:
                    header_delay: {}
                    percentage:
                      numerator: 100
              - name: test-server
                config:
                  response_body_size: 1024
                  response_headers:
                  - { header: { key: "x-nighthawk", value: "captured-ssl"}}
              - name: envoy.router
                config:
                  dynamic_stats: false
          tls_context:
            common_tls_context:
              tls_certificates:
                - certificate_chain:
                    filename: /var/lib/nighthawk/test-server.crt
                  private_key:
                    filename: /var/lib/nighthawk/test-server.key
  nighthawk-test-server-uncaptured.yaml: |
    admin:
      access_log_path: /var/lib/fortio/nighthawk_test_server_admin_access_uncaptured.log
      profile_path: /var/lib/fortio/nighthawk_test_server_uncaptured.prof
      address:
        socket_address: { address: 0.0.0.0, port_value: 9078 }
    static_resources:
      listeners:
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 8077
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              generate_request_id: false
              codec_type: auto
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                - name: service
                  domains:
                  - "*"
              http_filters:
              - name: envoy.fault
                config:
                  max_active_faults: 100
                  delay:
                    header_delay: {}
                    percentage:
                      numerator: 100
              - name: test-server
                config:
                  response_body_size: 1024
                  response_headers:
                  - { header: { key: "x-nighthawk", value: "uncaptured"}}
              - name: envoy.router
                config:
                  dynamic_stats: false
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 8076
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              generate_request_id: false
              codec_type: auto
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                - name: service
                  domains:
                  - "*"
              http_filters:
              - name: envoy.fault
                config:
                  max_active_faults: 100
                  delay:
                    header_delay: {}
                    percentage:
                      numerator: 100
              - name: test-server
                config:
                  response_body_size: 1024
                  response_headers:
                  - { header: { key: "x-nighthawk", value: "uncaptured-ssl"}}
              - name: envoy.router
                config:
                  dynamic_stats: false
          tls_context:
            common_tls_context:
              tls_certificates:
                - certificate_chain:
                    filename: /var/lib/nighthawk/test-server.crt
                  private_key:
                    filename: /var/lib/nighthawk/test-server.key
  # Self signed cert for the test server, good to go for 10 years.
  # command use to generate the .crt/.key: 
  # openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 \
  #   -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" -keyout www.example.com.key \
  #   -out www.example.com.cert
  test-server.crt: |
    -----BEGIN CERTIFICATE-----
    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
    -----END CERTIFICATE-----

  test-server.key: |
    -----BEGIN PRIVATE KEY-----
    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
    336VWRv/qme4bYVeb8pqnDgLZbz4Hgs=
    -----END PRIVATE KEY-----

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ $.name }}
  name: {{ $.name }}
spec:
  selector:
    matchLabels:
      app: {{ $.name }}
  template:
    metadata:
      annotations:
        {{- if $.Values.interceptionMode }}
        sidecar.istio.io/interceptionMode: {{ $.Values.interceptionMode }}
        {{- end }}
        {{- if eq $.name "fortioclient" }}
        {{- if $.Values.excludeOutboundIPRanges}}
        traffic.sidecar.istio.io/excludeOutboundIPRanges: {{ $.Values.excludeOutboundIPRanges }}
        {{- end }}
        {{- if $.Values.includeOutboundIPRanges }}
        traffic.sidecar.istio.io/includeOutboundIPRanges: {{ $.Values.includeOutboundIPRanges }}
        {{- end }}
        {{- end }}
        sidecar.istio.io/inject: "{{ $.V.inject }}"
        linkerd.io/inject: "{{ $.V.injectL }}"
{{- if eq $.V.injectL "enabled" }}
        config.linkerd.io/skip-outbound-ports: "8077" 
        config.linkerd.io/skip-inbound-ports: "8077"
{{- end }}
        # exclude inbound ports of the uncaptured container
        traffic.sidecar.istio.io/excludeInboundPorts: "8076,8077,8078"
        sidecar.istio.io/proxyCPU: {{ $.Values.proxy.cpu }}
        sidecar.istio.io/proxyMemory: {{ $.Values.proxy.memory }}
      labels:
        app: {{ $.name }}
    spec:
#      affinity:
#        podAntiAffinity:
#          requiredDuringSchedulingIgnoredDuringExecution:
#          - labelSelector:
#              matchExpressions:
#              - key: app
#                operator: In
#                values: 
#{{- if eq $.name "fortioclient" }}
#                - "fortioserver"
#{{- else }}
#                - "fortioclient"
#{{- end }}
#            topologyKey: "kubernetes.io/hostname"
      volumes:
      - name: shared-data
        emptyDir: {}
      - name: nighthawk-test-server-config
        configMap:
          name: nighthawk-test-server-config
      containers:
      - name: captured
        securityContext:
          runAsUser: 1
        volumeMounts:
        - name: shared-data
          mountPath: /var/lib/fortio
        - name: nighthawk-test-server-config
          mountPath: /var/lib/nighthawk 
        image: {{ $.Values.nighthawkImage }}
{{- if eq $.name "fortioclient" }}
        args:
        - nighthawk_service
        - --listen
        - 0.0.0.0:9999
        ports:
        - containerPort: 9999
          protocol: TCP
{{- else }}
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8079
          protocol: TCP
        args:
        - nighthawk_test_server
        - -c
        - /var/lib/nighthawk/nighthawk-test-server-captured.yaml
        - --base-id
        - "1"
{{- end }}
        resources:
{{- if $.Values.appresources1 }}
{{ toYaml $.Values.appresources1 | indent 10 }}
{{- end }}
      - name: shell
        securityContext:
          runAsUser: 1
        volumeMounts:
        - name: shared-data
          mountPath: /var/lib/fortio
        - name: nighthawk-test-server-config
          mountPath: /var/lib/nighthawk 
        image: {{ $.Values.curlImage }}
        args:
        - /bin/sleep
        - infinity
      - name: uncaptured
        securityContext:
          runAsUser: 1
{{- if eq $.name "fortioclient" }}
        image: {{ $.Values.fortioImage }}
        volumeMounts:
        - name: shared-data
          mountPath: /var/lib/fortio
        - name: nighthawk-test-server-config
          mountPath: /var/lib/nighthawk 
        args:
        - report
        - -http-port
        - "9076"
        - -grpc-port
        - "disabled"
        - -redirect-port
        - "disabled"
        - -data-dir
        - /var/lib/fortio/
{{- else }}
        image: {{ $.Values.nighthawkImage }}
        volumeMounts:
        - name: shared-data
          mountPath: /var/lib/fortio
        - name: nighthawk-test-server-config
          mountPath: /var/lib/nighthawk 
        args:
        - nighthawk_test_server
        - -c
        - /var/lib/nighthawk/nighthawk-test-server-uncaptured.yaml
        - --base-id
        - "2"
{{- end }}
        resources:
{{- if $.Values.appresources1 }}
{{ toYaml $.Values.appresources1 | indent 10 }}
{{- end }}
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ $.name }}
spec:
  hosts:
  - {{ $.name }}.{{ $.Values.domain }}
  gateways:
  - {{ $.Values.gateway }}
  http:
  - route:
    - destination:
        host: {{ $.name }}
        port:
          number: 8080
{{- end }}

{{- $fortioserver := dict "name" "fortioserver" "Values" .Values "V" .Values.server}}
{{- template "fortio" $fortioserver }}
{{- $fortioclient := dict "name" "fortioclient" "Values" .Values "V" .Values.client }}
{{- template "fortio" $fortioclient }}

---
{{- if or $.Values.server.inject $.Values.client.inject }}
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: {{ .Values.gateway }}
spec:
  selector:
    istio: ingressgateway
  servers:
  - hosts:
    - fortioserver.{{ .Values.domain }}
    - fortioclient.{{ .Values.domain }}
    port:
      name: http
      number: 80
      protocol: HTTP
  - hosts:
    - '*'
    port:
      name: https-fortio
      number: 443
      protocol: HTTPS
    tls:
      mode: SIMPLE
      privateKey: /etc/istio/ingressgateway-certs/tls.key
      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt
---
{{- end }}
{{- if $.Values.cert }}
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: fortio-two-pod
  namespace: istio-system
spec:
  secretName: istio-ingressgateway-certs-fortio-twopod
  issuerRef:
    name: letsencrypt
    kind: ClusterIssuer
  commonName: fortioclient.{{ .Values.domain }}
  dnsNames:
  - fortioclient.{{ .Values.domain }}
  acme:
    config:
    - http01:
        ingressClass: istio
      domains:
      - fortiotls.{{ .Values.domain }}
      - fortioclient.{{ .Values.domain }}
{{- end }}
