{{- if .Values.prometheus.enabled }}
# From https://raw.githubusercontent.com/coreos/prometheus-operator/v0.38.1/bundle.yaml with namespace replaced
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: prometheus-operator
    app.kubernetes.io/version: v0.38.1
  name: prometheus-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-operator
subjects:
  - kind: ServiceAccount
    name: prometheus-operator
    namespace: istio-prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: prometheus-operator
    app.kubernetes.io/version: v0.38.1
  name: prometheus-operator
rules:
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - create
  - apiGroups:
      - apiextensions.k8s.io
    resourceNames:
      - alertmanagers.monitoring.coreos.com
      - podmonitors.monitoring.coreos.com
      - prometheuses.monitoring.coreos.com
      - prometheusrules.monitoring.coreos.com
      - servicemonitors.monitoring.coreos.com
      - thanosrulers.monitoring.coreos.com
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - update
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - alertmanagers
      - alertmanagers/finalizers
      - prometheuses
      - prometheuses/finalizers
      - thanosrulers
      - thanosrulers/finalizers
      - servicemonitors
      - podmonitors
      - prometheusrules
    verbs:
      - '*'
  - apiGroups:
      - apps
    resources:
      - statefulsets
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - configmaps
      - secrets
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - list
      - delete
  - apiGroups:
      - ""
    resources:
      - services
      - services/finalizers
      - endpoints
    verbs:
      - get
      - create
      - update
      - delete
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
      - watch
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: prometheus-operator
    app.kubernetes.io/version: v0.38.1
  name: prometheus-operator
  namespace: istio-prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/name: prometheus-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/name: prometheus-operator
        app.kubernetes.io/version: v0.38.1
    spec:
      containers:
        - args:
            - --kubelet-service=kube-system/kubelet
            - --logtostderr=true
            - --config-reloader-image=jimmidyson/configmap-reload:v0.3.0
            - --prometheus-config-reloader=quay.io/coreos/prometheus-config-reloader:v0.38.1
          image: quay.io/coreos/prometheus-operator:v0.38.1
          name: prometheus-operator
          ports:
            - containerPort: 8080
              name: http
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            allowPrivilegeEscalation: false
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: prometheus-operator
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: prometheus-operator
    app.kubernetes.io/version: v0.38.1
  name: prometheus-operator
  namespace: istio-prometheus
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: prometheus-operator
    app.kubernetes.io/version: v0.38.1
  name: prometheus-operator
  namespace: istio-prometheus
spec:
  clusterIP: None
  ports:
    - name: http
      port: 8080
      targetPort: http
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: prometheus-operator
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  labels:
    prometheus: example
    role: alert-rules
  name: prometheus-example-rules
  namespace: istio-prometheus
spec:
  groups:
    - name: ./example.rules
      rules:
        - alert: ExampleAlert
          expr: vector(1)
    - name: "istio.recording-rules"
      interval: 5s
      rules:
        - record: "workload:istio_requests_total"
          expr: |
            sum without(instance, namespace, pod_name) (istio_requests_total)

        - record: "workload:istio_request_duration_milliseconds_count"
          expr: |
            sum without(instance, namespace, pod_name) (istio_request_duration_milliseconds_count)

        - record: "workload:istio_request_duration_milliseconds_sum"
          expr: |
            sum without(instance, namespace, pod_name) (istio_request_duration_milliseconds_sum)

        - record: "workload:istio_request_duration_milliseconds_bucket"
          expr: |
            sum without(instance, namespace, pod_name) (istio_request_duration_milliseconds_bucket)

        - record: "workload:istio_request_bytes_count"
          expr: |
            sum without(instance, namespace, pod_name) (istio_request_bytes_count)

        - record: "workload:istio_request_bytes_sum"
          expr: |
            sum without(instance, namespace, pod_name) (istio_request_bytes_sum)

        - record: "workload:istio_request_bytes_bucket"
          expr: |
            sum without(instance, namespace, pod_name) (istio_request_bytes_bucket)

        - record: "workload:istio_response_bytes_count"
          expr: |
            sum without(instance, namespace, pod_name) (istio_response_bytes_count)

        - record: "workload:istio_response_bytes_sum"
          expr: |
            sum without(instance, namespace, pod_name) (istio_response_bytes_sum)

        - record: "workload:istio_response_bytes_bucket"
          expr: |
            sum without(instance, namespace, pod_name) (istio_response_bytes_bucket)

        - record: "workload:istio_tcp_connections_opened_total"
          expr: |
            sum without(instance, namespace, pod_name) (istio_tcp_connections_opened_total)

        - record: "workload:istio_tcp_connections_closed_total"
          expr: |
            sum without(instance, namespace, pod_name) (istio_tcp_connections_opened_total)

        - record: "workload:istio_tcp_sent_bytes_total_count"
          expr: |
            sum without(instance, namespace, pod_name) (istio_tcp_sent_bytes_total_count)

        - record: "workload:istio_tcp_sent_bytes_total_sum"
          expr: |
            sum without(instance, namespace, pod_name) (istio_tcp_sent_bytes_total_sum)

        - record: "workload:istio_tcp_sent_bytes_total_bucket"
          expr: |
            sum without(instance, namespace, pod_name) (istio_tcp_sent_bytes_total_bucket)

        - record: "workload:istio_tcp_received_bytes_total_count"
          expr: |
            sum without(instance, namespace, pod_name) (istio_tcp_received_bytes_total_count)

        - record: "workload:istio_tcp_received_bytes_total_sum"
          expr: |
            sum without(instance, namespace, pod_name) (istio_tcp_received_bytes_total_sum)

        - record: "workload:istio_tcp_received_bytes_total_bucket"
          expr: |
            sum without(instance, namespace, pod_name) (istio_tcp_received_bytes_total_bucket)
    - name: k8s.rules
      rules:
        - expr: |
            sum(rate(container_cpu_usage_seconds_total{job="kubelet", metrics_path="/metrics/cadvisor", image!="", container!="POD"}[5m])) by (namespace)
          record: namespace:container_cpu_usage_seconds_total:sum_rate
        - expr: |
            sum by (cluster, namespace, pod, container) (
              rate(container_cpu_usage_seconds_total{job="kubelet", metrics_path="/metrics/cadvisor", image!="", container!="POD"}[5m])
            ) * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (
              1, max by(cluster, namespace, pod, node) (kube_pod_info)
            )
          record: node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate
        - expr: |
            container_memory_working_set_bytes{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}
            * on (namespace, pod) group_left(node) topk by(namespace, pod) (1,
              max by(namespace, pod, node) (kube_pod_info)
            )
          record: node_namespace_pod_container:container_memory_working_set_bytes
        - expr: |
            container_memory_rss{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}
            * on (namespace, pod) group_left(node) topk by(namespace, pod) (1,
              max by(namespace, pod, node) (kube_pod_info)
            )
          record: node_namespace_pod_container:container_memory_rss
        - expr: |
            container_memory_cache{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}
            * on (namespace, pod) group_left(node) topk by(namespace, pod) (1,
              max by(namespace, pod, node) (kube_pod_info)
            )
          record: node_namespace_pod_container:container_memory_cache
        - expr: |
            container_memory_swap{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}
            * on (namespace, pod) group_left(node) topk by(namespace, pod) (1,
              max by(namespace, pod, node) (kube_pod_info)
            )
          record: node_namespace_pod_container:container_memory_swap
        - expr: |
            sum(container_memory_usage_bytes{job="kubelet", metrics_path="/metrics/cadvisor", image!="", container!="POD"}) by (namespace)
          record: namespace:container_memory_usage_bytes:sum
        - expr: |
            sum by (namespace) (
                sum by (namespace, pod) (
                    max by (namespace, pod, container) (
                        kube_pod_container_resource_requests_memory_bytes{job="kube-state-metrics"}
                    ) * on(namespace, pod) group_left() max by (namespace, pod) (
                        kube_pod_status_phase{phase=~"Pending|Running"} == 1
                    )
                )
            )
          record: namespace:kube_pod_container_resource_requests_memory_bytes:sum
        - expr: |
            sum by (namespace) (
                sum by (namespace, pod) (
                    max by (namespace, pod, container) (
                        kube_pod_container_resource_requests_cpu_cores{job="kube-state-metrics"}
                    ) * on(namespace, pod) group_left() max by (namespace, pod) (
                      kube_pod_status_phase{phase=~"Pending|Running"} == 1
                    )
                )
            )
          record: namespace:kube_pod_container_resource_requests_cpu_cores:sum
        - expr: |
            max by (cluster, namespace, workload, pod) (
              label_replace(
                label_replace(
                  kube_pod_owner{job="kube-state-metrics", owner_kind="ReplicaSet"},
                  "replicaset", "$1", "owner_name", "(.*)"
                ) * on(replicaset, namespace) group_left(owner_name) topk by(replicaset, namespace) (
                  1, max by (replicaset, namespace, owner_name) (
                    kube_replicaset_owner{job="kube-state-metrics"}
                  )
                ),
                "workload", "$1", "owner_name", "(.*)"
              )
            )
          labels:
            workload_type: deployment
          record: mixin_pod_workload
{{- end }}