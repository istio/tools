# This is used to generate istio.yaml for a stress/load test cluster.

global:
  imagePullPolicy: Always
  meshExpansion:
    enabled: true
    useILB: true

  # setup mesh id to identify cluster
  # "${PROJECT_ID}/${ZONE}/${CLUSTER}"
  meshID: PROJECT_ID/central1-a/CLUSTER


  proxy:
    enableCoreDump: true
    concurrency: 2
    accessLogFile: ""
    # set proxy.image to the fully qualified image name.
    #image: gcr.io/mixologist-142215/proxyv2:1.4.0x2
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
      limits:
        memory: 256Mi 

    envoyAccessLogService:
      enabled: false
      host: accesslog-grpc.istio-system.svc.cluster.local
      port: 18090 

  mtls:
    # Default setting for service-to-service mtls. Can be set explicitly using
    # destination rules or service annotations.
    enabled: true

  multiCluster:
    enabled: true

   # Provides dns resolution for global services
  podDNSSearchNamespaces:
  - global
  - "{{ valueOrDefault .DeploymentMeta.Namespace \"default\" }}.global"

  # 1.1.5 sds.enabled requires controlPlaneSecurity to be disabled.
  controlPlaneSecurityEnabled: false
  sds:
    enabled: true
    udsPath: "unix:/var/run/sds/uds_path"
    useNormalJwt: true

# needed for multi cluster
istiocoredns:
  enabled: true

gateways:
  istio-egressgateway:
    enabled: true
    env:
      # Needed to route traffic via egress gateway if desired.
      ISTIO_META_REQUESTED_NETWORK_VIEW: "external"

  istio-ilbgateway:
    enabled: true
    type: NodePort #change to NodePort, ClusterIP or LoadBalancer if need be

  istio-ingressgateway:
    enabled: true
    meshExpansion: true
    sds:
      enabled: true

    secretVolumes:
    - name: istio-ingressgateway-certs
      secretName: istio-ingressgateway-certs
      mountPath: /etc/istio/ingressgateway-certs
    labels:
      istio: ingressgateway
      ver: ingress10
      app: istio-ingressgateway
      name: gateway
    replicas: 3
    autoscaleMin: 3
    autoscaleMax: 5
    resources:
      limits:
        cpu: 6000m
        memory: 512Mi
      requests:
        cpu: 4000m
        memory: 512Mi
    type: LoadBalancer #change to NodePort, ClusterIP or LoadBalancer if need be

pilot:
  sidecar: true
  autoscaleMax: 10
  resources:
    requests:
      cpu: 4800m
      memory: 2G
    limits:
      cpu: 5800m
      memory: 12G

sidecarInjectorWebhook:
  enabled: true

grafana:
  enabled: true
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        orgId: 1
        url: http://istio-prometheus.istio-prometheus:9090
        access: proxy
        isDefault: true
        jsonData:
          timeInterval: 5s
        editable: true

mixer:
  resources:
    requests:
      cpu: 3800m
      memory: 4G
    limits:
      cpu: 5800m
      memory: 5G
  telemetry:
    enabled: true
    autoscaleEnabled: true
    autoscaleMin: 1
    autoscaleMax: 15
    cpu:
      targetAverageUtilization: 80
    sessionAffinityEnabled: false

tracing:
  enabled: true
  jaeger:
    enabled: true

prometheus:
  enabled: false

kiali:
  enabled: false

certmanager:
  enabled: false
  email: mjog@google.com
  commonName: ingress.v10.istio.webinf.info
  certificates:
    - "ingress.v10.istio.webinf.info"
  #commonName: fortiotls.v10.istio.webinf.info
  #certificates:
  #  - "fortiotls.v10.istio.webinf.info"

nodeagent:
  enabled: true
  image: node-agent-k8s
  env:
    CA_PROVIDER: "Citadel"
    CA_ADDR: "istio-citadel:8060"
    VALID_TOKEN: true
    SECRET_GRACE_DURATION: "10m"
    SECRET_JOB_RUN_INTERVAL: "30s"
    SECRET_TTL: "20m"
