apiVersion: v1
kind: ServiceAccount
metadata:
  name: workload-rotate-service-account
  namespace: {{ .Values.Namespace }}
  labels:
    app: workload-rotate
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: workload-rotate-{{ .Values.Namespace }}
rules:
  - apiGroups: ["config.istio.io"]
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["rbac.istio.io"]
    resources: ["*"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["networking.istio.io"]
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["authentication.istio.io"]
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["*"]
  - apiGroups: ["extensions"]
    resources: ["thirdpartyresources", "thirdpartyresources.extensions", "ingresses", "ingresses/status"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["configmaps", "endpoints", "pods", "services", "namespaces", "secrets", "replicationcontrollers"]
    verbs: ["create", "get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["endpoints", "pods", "services"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["namespaces", "nodes", "secrets"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: workload-rotate-{{ .Values.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: workload-rotate-{{ .Values.Namespace }}
subjects:
  - kind: ServiceAccount
    name: workload-rotate-service-account
    namespace: {{ .Values.Namespace }}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: workload-rotate
  namespace: {{ .Values.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      run: workload-rotate
  template:
    metadata:
      labels:
        run: workload-rotate
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      volumes:
        - name: config
          configMap:
            name: workload-rotate
        - name: script
          configMap:
            name: script
            defaultMode: 0744
      containers:
        - args:
            - /script/run.sh
            - /bin/sleep
            - infinity
          image: gcr.io/mixologist-142215/hyperkube:v1.12.1
          imagePullPolicy: IfNotPresent
          name: workload-rotate
          volumeMounts:
            - name: script
              mountPath: /script
      restartPolicy: Always
      serviceAccount: workload-rotate-service-account
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: script
  namespace: {{ .Values.Namespace }}
data:
  run.sh: |
    #!/bin/bash
    set -ex
    WD=$(dirname $0)
    WD=$(cd $WD;pwd)

    ${WD}/rotate.sh {{ .Values.Cluster }} {{ .Values.DeployYaml }} {{ .Values.Namespace }} 5m &
    wait
  rotate.sh: |
    set -x
    errs=0
    function rotate_workloads() {
      local cluster=${1:?"cluster"}
      local deployfile=${2:?"deployfile"}
      local namespace=${3:?"namespace"}
      local duration=${4:?"rotation period"}

      gen=$(printf 'gen%.5d' ${genNo})
      generate_cert -mode signer -signer-priv=ca.key -signer-cert=ca.cert -host "${host}.local,${host}.${domain},${host}-${gen}.local" -duration 30m
      if [[ $? -ne 0 ]];then
        errs=$((errs+1))
        return
      fi

      kubectl -n "${ns}" create secret generic "${host}-cert" --from-file=key=priv.pem --from-file=cert=cert.pem  --dry-run -o yaml | kubectl -n "${ns}" apply -f -
      if [[ $? -ne 0 ]];then
        errs=$((errs+1))
      fi

      # check if the new certificate is visible
      # We add generation number in the cert for verification.
      for ((jj=0; jj<5; j++)) {
        echo | openssl s_client -connect "${INGRESS_IP}:443" -servername "${host}.local" -CAfile ca.cert | openssl x509 -noout -text  > /tmp/aa
        grep DNS /tmp/aa
        if [[ $(grep "${host}-${gen}.local" /tmp/aa) ]];then
          echo "Found ${host}-${gen}.local"
          break
        fi

        echo "Did not find ${host}-${gen}.local"
        sleep 10
      }
    }

    # fetch signer cert and key
    # This is used to sign certificate for rotation.
    kubectl get secret -n istio-system istio-ca-secret -o yaml > ca.yaml
    awk '/ca-cert/ {print $2}' ca.yaml | base64 --decode > ca.cert
    awk '/ca-key/ {print $2}' ca.yaml | base64 --decode > ca.key

    while [[ true ]];do
      for ((ii=0; ii<65535; ii++)) {
        rotate_cert $* ${ii}
        sleep {{ .Values.configSleep }}
        sleep $[ ( $RANDOM % {{ .Values.configSleep }} )  + 1 ]s
      }
    done