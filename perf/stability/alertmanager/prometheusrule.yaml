apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  labels:
    prometheus: prometheus
    role: prometheus-example-rules
  name: prometheus-example-rules
  namespace: istio-prometheus
spec:
  groups:
    - name: ./workload.rules
      rules:
        - alert: HTTP5xxRateHigh
          annotations:
            summary: '5xx rate too high'
            description: 'The HTTP 5xx errors rate unusually high in 5 mins'
          expr: >
            sum(irate(istio_requests_total{reporter="destination", response_code=~"5.*"}[5m])) / sum(irate(istio_requests_total{reporter="destination"}[5m])) > 0.05
          for: 5m
        - alert: LatencyHigh
          expr: sum(irate(istio_request_duration_milliseconds_bucket{source_workload=~"svc.*"}[5m])) by (source_workload,namespace)  > 30000
          for: 10m
          annotations:
            message:  "Request duration has slowed down for workload: {{`{{$labels.source_workload}}`}} in namespace: {{`{{$labels.namespace}}`}}. Response duration is {{`{{$value}}`}} seconds"
    - name: ./infra.rules
      rules:
        - alert: ContainerCPUUsageHigh
          expr: (sum(rate(container_cpu_usage_seconds_total{namespace!="kube-system", container=~"istio-proxy|discovery", namespace!=""}[5m])) BY (namespace, pod, container) * 100) > 80
          for: 5m
          annotations:
            summary: "Container CPU usage (namespace {{ $labels.namespace }}) (pod {{ $labels.pod }}) (container {{ $labels.container }})"
            description: "Container CPU usage is above 80%\n  VALUE = {{ $value }}\n"
        - alert: ContainerMemoryUsageHigh
          expr: (sum(container_memory_working_set_bytes{namespace!="kube-system", container=~"istio-proxy|discovery", namespace!=""}) BY (container, pod, namespace)  / (sum(container_spec_memory_limit_bytes{namespace!="kube-system", container!="POD"}) BY (container, pod, namespace) > 0)* 100) > 80
          for: 5m
          annotations:
            summary: "Container Memory usage (namespace {{ $labels.namespace }}) (pod {{ $labels.pod }}) (container {{ $labels.container }})"
            description: "Container Memory usage is above 80%\n  VALUE = {{ $value }}\n"
    - name: ./controlplane.rules
      rules:
        - alert: IstiodxdsPushErrorsHigh
          annotations:
            summary: 'istiod push errors is too high'
            description: 'istiod push errors is too high during the last 5m'
          expr: >
            sum(irate(pilot_xds_push_errors{app="istiod"}[5m])) / sum(irate(pilot_xds_pushes{app="istiod"}[5m])) > 0.05
          for: 5m
        - alert: IstiodxdsRejectHigh
          annotations:
            summary: 'istiod rejects rate is too high'
            description: 'istiod rejects rate is too high during the last 5m'
          expr: >
            sum(irate(pilot_total_xds_rejects{app="istiod"}[5m])) / sum(irate(pilot_xds_pushes{app="istiod"}[5m])) > 0.05
          for: 5m
        - alert: IstiodContainerNotReady
          annotations:
            summary: 'istiod container not ready'
            description: 'container: discovery not running'
          expr: >
            kube_pod_container_status_running{namespace="istio-system", container="discovery", component=""} == 0
          for: 5m
        - alert: IstiodUnavailableReplica
          annotations:
            summary: 'Istiod unavailable pod'
          expr: >
            kube_deployment_status_replicas_unavailable{deployment="istiod", component=""} > 0
          for: 5m
        - alert: Ingress200RateLow
          annotations:
            summary: 'ingress gateway 200 rate drops'
            description: 'The expected rate is 100 per ns, the limit is set based on 15ns'
          expr: >
            sum(rate(istio_requests_total{reporter="source", source_workload="istio-ingressgateway",response_code="200",destination_service_namespace=~"service-graph.*"}[5m])) < 1450
          for: 5m
    - name: "istio.recording-rules"
      interval: 5s
      rules:
        - record: "workload:istio_requests_total"
          expr: |
            sum without(instance, namespace, pod) (istio_requests_total)

        - record: "workload:istio_request_duration_milliseconds_count"
          expr: |
            sum without(instance, namespace, pod) (istio_request_duration_milliseconds_count)

        - record: "workload:istio_request_duration_milliseconds_sum"
          expr: |
            sum without(instance, namespace, pod) (istio_request_duration_milliseconds_sum)

        - record: "workload:istio_request_duration_milliseconds_bucket"
          expr: |
            sum without(instance, namespace, pod) (istio_request_duration_milliseconds_bucket)

    - name: k8s.rules
      rules:
        - expr: |
            sum(rate(container_cpu_usage_seconds_total{job="kubelet", metrics_path="/metrics/cadvisor", image!="", container!="POD"}[5m])) by (namespace)
          record: namespace:container_cpu_usage_seconds_total:sum_rate
        - expr: |
            sum by (cluster, namespace, pod, container) (
              rate(container_cpu_usage_seconds_total{job="kubelet", metrics_path="/metrics/cadvisor", image!="", container!="POD"}[5m])
            ) * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (
              1, max by(cluster, namespace, pod, node) (kube_pod_info)
            )
          record: node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate
        - expr: |
            container_memory_working_set_bytes{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}
            * on (namespace, pod) group_left(node) topk by(namespace, pod) (1,
              max by(namespace, pod, node) (kube_pod_info)
            )
          record: node_namespace_pod_container:container_memory_working_set_bytes
        - expr: |
            max by (cluster, namespace, workload, pod) (
              label_replace(
                label_replace(
                  kube_pod_owner{job="kube-state-metrics", owner_kind="ReplicaSet"},
                  "replicaset", "$1", "owner_name", "(.*)"
                ) * on(replicaset, namespace) group_left(owner_name) topk by(replicaset, namespace) (
                  1, max by (replicaset, namespace, owner_name) (
                    kube_replicaset_owner{job="kube-state-metrics"}
                  )
                ),
                "workload", "$1", "owner_name", "(.*)"
              )
            )
          labels:
            workload_type: deployment
          record: mixin_pod_workload