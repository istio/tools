apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.namespace }}-account
  namespace: istio-stability-{{ .Values.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Values.namespace }}-role
rules:
  - apiGroups: ["extensions"]
    resources: ["deployments", "deployments/scale"]
    verbs: ["get", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Values.namespace }}-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Values.namespace }}-role
subjects:
  - kind: ServiceAccount
    name: {{ .Values.namespace }}-account
    namespace: istio-stability-{{ .Values.namespace }}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: istio-chaos-total
  namespace: istio-stability-{{ .Values.namespace }}
  labels:
    app: istio-chaos-total
spec:
  schedule: "*/{{ .Values.chaosIntervalMinutes }} * * * *" # Every x minutes
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            sidecar.istio.io/inject: "false"
          labels:
            app: istio-chaos-total
        spec:
          serviceAccountName: {{ .Values.namespace }}-account
          containers:
            - name: istio-chaos-total
              image: {{ .Values.kubectlImage }}
              command:
                - bash
                - -c
                - |-
                  #!/bin/bash
                  CHAOS_LEVEL={{ .Values.chaosLevel }}
                  CHAOS_DURATION={{ .Values.chaosDurationMinutes }}
                  COMPONENTS=({{ .Values.components }})

                  function log () {
                      echo "`date`: $1"
                  }

                  function scale () {
                      IFS=' ' read -r -a TO_SCALE <<< "$1"
                      for COMPONENT in ${TO_SCALE[@]}
                      do
                          log "Scaling $COMPONENT to $2..."
                          kubectl scale deployment/$COMPONENT --replicas $2 -n istio-system
                      done
                  }

                  # Randomise component array
                  IFS=$'\n' COMPONENTS=($(sort -R <<<"${COMPONENTS[*]}"))

                  # Select components for chaos
                  COMPONENT_COUNT=$(( ( RANDOM % $CHAOS_LEVEL )  + 1 ))
                  SELECTED_COMPONENTS=${COMPONENTS[@]::$COMPONENT_COUNT}
                  log "The following components have been selected for chaos: $SELECTED_COMPONENTS"

                  # Cause some chaos
                  scale $SELECTED_COMPONENTS 0
                  log "Sleeping for chaos duration (${CHAOS_DURATION}m)"
                  sleep $((CHAOS_DURATION*60))
                  scale $SELECTED_COMPONENTS 1
                  log "Chaos managed."

          restartPolicy: OnFailure

